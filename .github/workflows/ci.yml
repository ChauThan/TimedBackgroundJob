name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET 9.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Extract git tag (Windows)
        id: get_tag_win
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $tag = git describe --tags --abbrev=0 2>$null
          if (-not $tag) { $tag = '' }
          Write-Host "Git tag: $tag"
          echo "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Extract git tag (Unix)
        id: get_tag_unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Git tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Fail if no valid tag for release build (Windows)
        if: github.ref_type == 'tag' && runner.os == 'Windows' && steps.get_tag_win.outputs.tag == ''
        run: |
          echo "No valid git tag found for release build. Failing."
          exit 1
      - name: Fail if no valid tag for release build (Unix)
        if: github.ref_type == 'tag' && runner.os != 'Windows' && steps.get_tag_unix.outputs.tag == ''
        run: |
          echo "No valid git tag found for release build. Failing."
          exit 1
      - name: Restore dependencies
        run: dotnet restore TimedBackgroundJob.sln
      - name: Build solution (inject version if tag present, Windows)
        if: runner.os == 'Windows'
        run: |
          if ('${{ steps.get_tag_win.outputs.tag }}' -ne '') {
            dotnet build TimedBackgroundJob.sln --configuration Release --no-restore /p:Version=${{ steps.get_tag_win.outputs.tag }}
          } else {
            dotnet build TimedBackgroundJob.sln --configuration Release --no-restore
          }
      - name: Build solution (inject version if tag present, Unix)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ steps.get_tag_unix.outputs.tag }}" != "" ]; then \
            dotnet build TimedBackgroundJob.sln --configuration Release --no-restore /p:Version=${{ steps.get_tag_unix.outputs.tag }}; \
          else \
            dotnet build TimedBackgroundJob.sln --configuration Release --no-restore; \
          fi
      - name: Run tests
        run: dotnet test TimedBackgroundJob.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --results-directory "TestResults"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: TestResults/*.trx
